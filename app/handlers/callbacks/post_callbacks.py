import asyncio
from aiogram import Dispatcher, F
from datetime import datetime, time
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, InputMediaVideo
from aiogram.fsm.context import FSMContext
from app.database import get_all_posts, add_post, delete_post, get_post_by_id
from app.UI.inline import get_admin_keyboard, get_view_post_keyboard, get_skip_media_keyboard
from app.utils.states import PostCreationState
from app.handlers.callbacks.callback_data import (
  BackToListCallback, CreatePostCallback, DeletePostCallback, SkipMediaCallback, ViewPostCallback
)

#^ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ 
async def create_post_callback(callback: CallbackQuery, state: FSMContext):
  await state.set_state(PostCreationState.title)
  await callback.message.edit_text("<b><i>‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</i></b>", parse_mode="HTML")
  await callback.answer()


#^ –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
async def post_title_handler(message: Message, state: FSMContext):
  await state.update_data(title=message.text)
  await state.set_state(PostCreationState.content)
  await message.answer("<b><i>‚úè –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞</i></b>", parse_mode="HTML")
  
  
#^ –£–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
async def post_content_handler(message: Message, state: FSMContext):
  await state.update_data(content=message.text)
  await state.set_state(PostCreationState.media)
  await message.answer(
    "<b><i>–î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç –∫ –ø–æ—Å—Ç—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é, –ø–æ–∫–∞ –∑–∞–≥–ª—É–≥—à–∫–∞) ‚úè</i></b>", 
    reply_markup=get_skip_media_keyboard(),
    parse_mode="HTML"
    )


#^ –£–∫–∞–∑–∞–Ω–∏–µ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def post_media_handler(message: Message, state: FSMContext):
  media_file_id = None
  
  if message.photo:
    media_file_id = message.photo[-1].file_id
  elif message.video:
    media_file_id = message.video.file_id
  else:
    error_message = await message.answer(
      "<b>üí¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ,\n–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥</b>", 
      parse_mode="HTML"
    )
    await asyncio.sleep(3)
    await error_message.delete()
    return
  
  await state.update_data(media_content=media_file_id)
  await state.set_state(PostCreationState.schedule_time)
  await message.answer(
    "<b><i>‚úè –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM:</i></b>",
    parse_mode="HTML")


#^ –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
async def skip_media_handler(callback: CallbackQuery, state: FSMContext):
  await state.update_data(media_content=None)
  
  await state.set_state(PostCreationState.schedule_time)
  await callback.message.edit_text(
    "<b><i>‚úè –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM:</i></b>", 
    parse_mode="HTML"
  )
  await callback.answer()


#^ –£–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async def post_schedule_handler(message: Message, state: FSMContext):
  user_data = await state.get_data()
  
  try:
    schedule_time = datetime.strptime(message.text, "%H:%M").time()
  except ValueError:
    eror_message = await message.answer(
      "<b><i>üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:MM</code></i></b>", 
      parse_mode="HTML"
      )
    await asyncio.sleep(3)
    await eror_message.delete()
    #TODO –î–æ–¥–µ–ª–∞—Ç—å –ø–æ–¥ –ú–°–ö
  
  await add_post(
    title=user_data["title"],
    content=user_data["content"],
    media_content=user_data["media_content"],
    schedule_time=schedule_time
  )
  await state.clear()
  
  posts = await get_all_posts()
  keyboard = get_admin_keyboard(posts)
  await message.answer(
    "<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏,\n–∏–ª–∏ <code>–∏–∑–º–µ–Ω–∏—Ç—å\–æ—Ç–∫–ª—é—á–∏—Ç—å\—É–¥–∞–ª–∏—Ç—å</code> —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π üëáüèª</b>",
    reply_markup=keyboard,
    parse_mode="HTML"
    )


#^ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async def delete_post_handler(callback: CallbackQuery, callback_data: DeletePostCallback):
  post_id = callback_data.id
  
  await delete_post(post_id)
  
  posts = await get_all_posts()
  keyboard = get_admin_keyboard(posts)
  
  await callback.message.edit_text(
    text="<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏,\n–∏–ª–∏ <code>–∏–∑–º–µ–Ω–∏—Ç—å\–æ—Ç–∫–ª—é—á–∏—Ç—å\—É–¥–∞–ª–∏—Ç—å</code> —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π üëáüèª</b>",
    reply_markup=keyboard,
    parse_mode="HTML"
  )


#^ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def view_post_handler(callback: CallbackQuery, callback_data: ViewPostCallback):
  post_id = callback_data.id
  post = await get_post_by_id(post_id)
  
  if not post:
    await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    return
  
  post_text = (
    f"<b>–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b> <code>{post.schedule_time.strftime('%H:%M')}</code>\n\n"
    f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b> <u><b>{post.title}</b></u>\n"
    f"<b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b> <i><blockquote expandable>{post.content}</blockquote></i>"
  )
  
  keyboard = get_view_post_keyboard(post_id)
  
  if post.media_content:
    media = InputMediaPhoto(media=post.media_content, caption=post_text, parse_mode="HTML")
    # TODO –î–õ–Ø –í–ò–î–ï–û
    # TODO media = InputMediaVideo(media=post.media_content, caption=post_text, parse_mode="HTML")
    await callback.message.edit_media(media=media, reply_markup=keyboard)
  else:
    await callback.message.edit_text(
      text=post_text,
      reply_markup=keyboard,
      parse_mode="HTML"
    )
  
  await callback.answer()
  

#^ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
async def back_to_list_handler(callback: CallbackQuery, callback_data: BackToListCallback):
  posts = await get_all_posts()
  keyboard = get_admin_keyboard(posts)
  
  try:
    await callback.message.edit_text(
      text="<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏,\n–∏–ª–∏ <code>–∏–∑–º–µ–Ω–∏—Ç—å\–æ—Ç–∫–ª—é—á–∏—Ç—å\—É–¥–∞–ª–∏—Ç—å</code> —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π üëáüèª</b>",
      reply_markup=keyboard,
      parse_mode="HTML"
    )
  except Exception as e:
    await callback.message.delete()
    await callback.message.answer(
      text="<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏,\n–∏–ª–∏ <code>–∏–∑–º–µ–Ω–∏—Ç—å\–æ—Ç–∫–ª—é—á–∏—Ç—å\—É–¥–∞–ª–∏—Ç—å</code> —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π üëáüèª</b>",
      reply_markup=keyboard,
      parse_mode="HTML"
    )
  
  await callback.answer()


#^ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã 
def register_post_callbacks(dp: Dispatcher):
  dp.callback_query.register(create_post_callback, CreatePostCallback.filter())
  dp.callback_query.register(delete_post_handler, DeletePostCallback.filter())
  dp.callback_query.register(view_post_handler, ViewPostCallback.filter())
  dp.callback_query.register(back_to_list_handler, BackToListCallback.filter())
  dp.callback_query.register(skip_media_handler, SkipMediaCallback.filter())
  dp.message.register(post_title_handler, PostCreationState.title)
  dp.message.register(post_content_handler, PostCreationState.content)
  dp.message.register(post_media_handler, PostCreationState.media)
  dp.message.register(post_schedule_handler, PostCreationState.schedule_time)