import asyncio
from aiogram import Dispatcher, F
from datetime import datetime, time
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from app.UI.inline import get_admin_keyboard
from app.utils.states import PostCreationState
from app.database import get_all_posts, add_post
from app.handlers.callbacks.callback_data import CreatePostCallback

#^ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ 
async def create_post_callback(callback: CallbackQuery, state: FSMContext):
  await state.set_state(PostCreationState.title)
  await callback.message.edit_text("<b><i>‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</i></b>", parse_mode="HTML")
  await callback.answer()


#^ –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
async def post_title_handler(message: Message, state: FSMContext):
  await state.update_data(title=message.text)
  await state.set_state(PostCreationState.content)
  await message.answer("<b><i>‚úè –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞</i></b>", parse_mode="HTML")
  
  
#^ –£–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
async def post_content_handler(message: Message, state: FSMContext):
  await state.update_data(content=message.text)
  await state.set_state(PostCreationState.media)
  await message.answer("<b><i>–î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç –∫ –ø–æ—Å—Ç—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é, –ø–æ–∫–∞ –∑–∞–≥–ª—É–≥—à–∫–∞) ‚úè</i></b>", parse_mode="HTML")


#^ –£–∫–∞–∑–∞–Ω–∏–µ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def post_media_handler(message: Message, state: FSMContext):
  await state.update_data(media_content=message.text)
  await state.set_state(PostCreationState.schedule_time)
  await message.answer("<b><i>‚úè –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM:</i></b>", parse_mode="HTML")
  #TODO –î–æ–¥–µ–ª–∞—Ç—å –ø–æ—Ç–æ–º —Å –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º 


#^ –£–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async def post_schedule_handler(message: Message, state: FSMContext):
  user_data = await state.get_data()
  
  try:
    schedule_time = datetime.strptime(message.text, "%H:%M").time()
  except ValueError:
    eror_message = await message.answer(
      "<b><i>üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:MM</code></i></b>", 
      parse_mode="HTML"
      )
    await asyncio.sleep(3)
    await eror_message.delete()
    #TODO –î–æ–¥–µ–ª–∞—Ç—å –ø–æ–¥ –ú–°–ö
  
  await add_post(
    title=user_data["title"],
    content=user_data["content"],
    media_content=user_data["media_content"],
    schedule_time=schedule_time
  )
  await state.clear()
  
  posts = await get_all_posts()
  keyboard = get_admin_keyboard(posts)
  await message.answer(
    "<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏,\n–∏–ª–∏ <code>–∏–∑–º–µ–Ω–∏—Ç—å\–æ—Ç–∫–ª—é—á–∏—Ç—å\—É–¥–∞–ª–∏—Ç—å</code> —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π üëáüèª</b>",
    reply_markup=keyboard,
    parse_mode="HTML"
    )


#^ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã 
def register_post_callbacks(dp: Dispatcher):
  dp.callback_query.register(create_post_callback, CreatePostCallback.filter())
  dp.message.register(post_title_handler, PostCreationState.title)
  dp.message.register(post_content_handler, PostCreationState.content)
  dp.message.register(post_media_handler, PostCreationState.media)
  dp.message.register(post_schedule_handler, PostCreationState.schedule_time)