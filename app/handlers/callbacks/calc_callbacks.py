import asyncio
import logging
import gspread

from aiogram import Router
from thefuzz import process
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.utils.states import FreightCalculationState
from app.utils.google_sheets import calculate_delivery_cost, get_google_sheet, get_tariff_zhd
from app.UI.inline import (
    get_calculator_keyboard,
    get_build_keyboard,
    get_confirm_keyboard,
    get_confirm_keyboard_for_zhd,
)
from app.handlers.callbacks.callback_data import (
    CalcConfirmZhdCallback,
    ContinueStartCallback,
    CalcBuildCallback,
    CalcBackToMenu,
    CalcAutoCallback,
    CalcAviaCallback,
    CalcZdCallback,
    CalcConteinersCallback,
    CalcConfirmCallback,
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

router = Router()


# region #& –ò—Å–ø—Ä–∞–≤–ª–µ–∏–µ –≥–æ—Ä–æ–¥–æ–≤


def get_available_cities(sheet_name, column_index):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ Google Sheets (—É–±–∏—Ä–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—è –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)."""
    sheet = get_google_sheet(sheet_name)
    cities = sheet.col_values(column_index)  # –ë–µ—Ä–µ–º –Ω—É–∂–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    clean_cities = [city.strip().lower() for city in cities if city.strip()]
    
    logging.info(f"üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ {sheet_name}: {clean_cities}")
    return clean_cities


def find_closest_city(city, available_cities):
    """–ò—â–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ Google Sheets."""
    match, score = process.extractOne(city, available_cities)
    logging.info(f"üîç –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è '{city}': {match} (–¢–æ—á–Ω–æ—Å—Ç—å: {score}%)")
    return match if score > 75 else None  # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 75%, –±–µ—Ä–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç



# endregion


# region #&–í—ã–∑–æ–≤ –∫–ª–∞–≤
# ^ –í—ã–∑–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª—å–∫—É–ª–µ–π
@router.callback_query(ContinueStartCallback.filter())
async def Continue_handler(callback: CallbackQuery):
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:\n<code>–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏</code> üëá"
    keyboard = get_calculator_keyboard()

    await callback.message.edit_text(
        text=text, reply_markup=keyboard, parse_mode="HTML"
    )

    await callback.answer()


# ^ –í—ã–∑–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–±–æ—Ä–∫–∏
@router.callback_query(CalcBuildCallback.filter())
async def Build_handler(callback: CallbackQuery):
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ üëáüèª</b>"
    keyboard = get_build_keyboard()

    await callback.message.edit_text(
        text=text, reply_markup=keyboard, parse_mode="HTML"
    )

    await callback.answer()


# ^ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª—å–∫—É–ª–µ–π
@router.callback_query(CalcBackToMenu.filter())
async def Back_to_calc_menu_handler(callback: CallbackQuery):
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:\n<code>–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏</code> üëáüèª"
    keyboard = get_calculator_keyboard()

    await callback.message.edit_text(
        text=text, reply_markup=keyboard, parse_mode="HTML"
    )

    await callback.answer()


# endregion


# region #&auto


# ^ –°—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(CalcAutoCallback.filter())
async def start_calculation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FreightCalculationState.entering_origin_city)
    await callback.message.answer(
        text="<b>üöö –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>", parse_mode="HTML"
    )
    await callback.answer()


# ^ –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
@router.message(FreightCalculationState.entering_origin_city)
async def enter_origin_city(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    
    available_cities = get_available_cities("RAW –°–±–æ—Ä–∫–∞ –ê–≤—Ç–æ", 1)  # –ë–µ—Ä–µ–º POL City

    if city in available_cities:
        sheet = get_google_sheet("RAW –°–±–æ—Ä–∫–∞ –ê–≤—Ç–æ")
        row_index = available_cities.index(city) + 1
        pod_city = sheet.cell(row_index, 2).value  # –ë–µ—Ä–µ–º POD City

        if pod_city and pod_city.strip():
            pod_city = pod_city.strip()
            await state.update_data(origin_city=city.capitalize(), intermediate_city=pod_city)
            logging.info(f"üöö –í–≤–µ–¥–µ–Ω –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {city.capitalize()}, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ–¥: {pod_city}")

            await state.set_state(FreightCalculationState.entering_destination_city)
            await message.answer(
                f"<b>üèô –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–§:</b>", parse_mode="HTML"
            )
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω POD City –¥–ª—è {city} –≤ —Ç–∞–±–ª–∏—Ü–µ RAW –°–±–æ—Ä–∫–∞ –ê–≤—Ç–æ!")
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è {city}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ."
            )
    else:
        corrected_city = find_closest_city(city, available_cities)
        if corrected_city:
            await message.answer(
                f"üîç –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <b>{corrected_city.capitalize()}</b>? (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                parse_mode="HTML"
            )
            # –í–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ enter_origin_city() –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            sheet = get_google_sheet("RAW –°–±–æ—Ä–∫–∞ –ê–≤—Ç–æ")
            row_index = available_cities.index(corrected_city) + 1
            pod_city = sheet.cell(row_index, 2).value.strip()

            await state.update_data(origin_city=corrected_city.capitalize(), intermediate_city=pod_city)
            logging.info(f"üöö –í–≤–µ–¥–µ–Ω –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {corrected_city.capitalize()}, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ–¥: {pod_city}")

            await state.set_state(FreightCalculationState.entering_destination_city)
            await message.answer(
                f"<b>üèô –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–§:</b>", parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                f"üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {', '.join(available_cities[:10])}..."
            )
            

# ^ –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(FreightCalculationState.entering_destination_city)
async def enter_destination_city(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    data = await state.get_data()
    pod_city = data.get("intermediate_city")

    available_cities = get_available_cities("RAW –°–±–æ—Ä–∫–∞ –ø–æ –†–§", 2)

    if city in available_cities:
        await state.update_data(destination_city=city.capitalize())
        logging.info(f"üèô –í–≤–µ–¥–µ–Ω –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {city}")

        await state.set_state(FreightCalculationState.entering_weight)
        await message.answer("<b>‚öñ –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (–∫–≥):</b>", parse_mode="HTML")
    else:
        corrected_city = find_closest_city(city, available_cities)
        if corrected_city:
            await message.answer(f"üîç –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <b>{corrected_city.capitalize()}</b>? (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                                 parse_mode="HTML")
            await state.update_data(destination_city=corrected_city.capitalize()) 
            await state.set_state(FreightCalculationState.entering_weight) 
            await message.answer("<b>‚öñ –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (–∫–≥):</b>", parse_mode="HTML") 
        else:
            await message.answer(f"‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                                 f"üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {', '.join(available_cities[:10])}...")


# ^ –í–≤–æ–¥ –≤–µ—Å–∞ –≥—Ä—É–∑–∞
@router.message(FreightCalculationState.entering_weight)
async def enter_weigth(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await state.set_state(FreightCalculationState.entering_volume)
        await message.answer(
            text="<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞ (–º¬≥):</b>", parse_mode="HTML"
        )
    except ValueError:
        error_message = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        await asyncio.sleep(3)
        await error_message.delete()


# ^ –í–≤–æ–¥ –æ–±—ä–µ–º–∞ –≥—É—Ä–∑–∞
@router.message(FreightCalculationState.entering_volume)
async def enter_volume(message: Message, state: FSMContext):
    try:
        volume = float(message.text)
        await state.update_data(volume=volume)
        await state.set_state(FreightCalculationState.confirming_data)

        data = await state.get_data()
        response = (
            f"<b>–í—ã –≤–≤–µ–ª–∏:</b>\n\n"
            f"üöö <b>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <code>{data['origin_city']}</code></b>\n"
            f"üèô <b>–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{data['destination_city']}</code></b>\n"
            f"‚öñ <b>–í–µ—Å: <code>{data['weight']} –∫–≥</code></b>\n"
            f"üì¶ <b>–û–±—ä–µ–º: <code>{data['volume']} –º¬≥</code></b>\n"
        )

        keyboard = get_confirm_keyboard()

        await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

    except ValueError:
        error_message = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        await asyncio.sleep(3)
        await error_message.delete()


# ^ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.callback_query(CalcConfirmCallback.filter())
async def confirm_calculation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    required_keys = ["origin_city", "destination_city", "weight", "volume"]
    missing_keys = [key for key in required_keys if key not in data]

    if missing_keys:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ {', '.join(missing_keys)}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."
        )
        await state.clear()
        return

    try:
        result = calculate_delivery_cost(
            origin_city=data["origin_city"],
            destination_city=data["destination_city"],
            weight=data["weight"],
            volume=data["volume"]
        )

        response = (
            f"‚úÖ <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
            f"üöö <b>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> <code>{result['origin_city']}</code>\n"
            f"üèô <b>–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <code>{result['destination_city']}</code>\n"
            f"‚öñ <b>–í–µ—Å –≥—Ä—É–∑–∞:</b> <code>{result['weight']} –∫–≥</code>\n"
            f"üì¶ <b>–û–±—ä–µ–º –≥—Ä—É–∑–∞:</b> <code>{result['volume']} –º¬≥</code>\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã:</b> <code>{result['cost_before_border']:.2f} —Ä—É–±.</code>\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –≥—Ä–∞–Ω–∏—Ü—ã:</b> <code>{result['cost_after_border']:.2f} —Ä—É–±.</code>\n"
            f"üí∞ <u><b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <code>{result['total_cost']:.2f} —Ä—É–±.</code></u>\n"
        )

        await callback.message.edit_text(response, parse_mode="HTML")
        await state.clear()

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
        await state.clear()


# endregion


# region #&ZHD


# ^ –°—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ñ–î
@router.callback_query(CalcZdCallback.filter())
async def start_calculation_zhd(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FreightCalculationState.entering_origin_city_zhd)
    await callback.message.answer(
        text="<b>üöÇ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ñ–î):</b>", parse_mode="HTML"
    )
    await callback.answer()


# ^ –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ñ–î
@router.message(FreightCalculationState.entering_origin_city_zhd)
async def enter_origin_city_zhd(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    available_cities = get_available_cities("RAW –°–±–æ—Ä–∫–∞ –ñ–î", 1)

    if city in available_cities:
        await state.update_data(origin_city=city.capitalize())
        logging.info(f"üöÇ –í–≤–µ–¥–µ–Ω –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {city.capitalize()}")

        await state.set_state(FreightCalculationState.entering_destination_city_zhd)
        await message.answer("<b>üèô –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–§:</b>", parse_mode="HTML")
    else:
        corrected_city = find_closest_city(city, available_cities)
        if corrected_city:
            await message.answer(f"üîç –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <b>{corrected_city.capitalize()}</b>? (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                                 parse_mode="HTML")
            await state.update_data(origin_city=corrected_city.capitalize())
            await state.set_state(FreightCalculationState.entering_destination_city_zhd)
            await message.answer("<b>üèô –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–§:</b>", parse_mode="HTML")
        else:
            await message.answer(f"‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                                 f"üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {', '.join(available_cities[:10])}...")


# ^ –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ñ–î
@router.message(FreightCalculationState.entering_destination_city_zhd)
async def enter_destination_city_zhd(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    available_cities = get_available_cities("RAW –°–±–æ—Ä–∫–∞ –ñ–î", 2)

    if city in available_cities:
        await state.update_data(destination_city=city.capitalize())
        logging.info(f"üèô –í–≤–µ–¥–µ–Ω –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ñ–î): {city}")

        await state.set_state(FreightCalculationState.entering_weight_zhd)
        await message.answer("<b>‚öñ –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (–∫–≥):</b>", parse_mode="HTML")
    else:
        corrected_city = find_closest_city(city, available_cities)
        if corrected_city:
            await message.answer(f"üîç –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <b>{corrected_city.capitalize()}</b>? (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                                 parse_mode="HTML")
            await state.update_data(destination_city=corrected_city.capitalize())
            await state.set_state(FreightCalculationState.entering_weight_zhd)
            await message.answer("<b>‚öñ –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (–∫–≥):</b>", parse_mode="HTML")
        else:
            await message.answer(f"‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                                 f"üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {', '.join(available_cities[:10])}...")


# ^ –í–≤–æ–¥ –≤–µ—Å–∞ –≥—Ä—É–∑–∞ –¥–ª—è –ñ–î
@router.message(FreightCalculationState.entering_weight_zhd)
async def enter_weight_zhd(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await state.set_state(FreightCalculationState.entering_volume_zhd)
        await message.answer("<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞ (–º¬≥):</b>", parse_mode="HTML")
    except ValueError:
        error_message = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        await asyncio.sleep(3)
        await error_message.delete()
        

# ^ –í–≤–æ–¥ –æ–±—ä–µ–º–∞ –≥—Ä—É–∑–∞ –¥–ª—è –ñ–î
@router.message(FreightCalculationState.entering_volume_zhd)
async def enter_volume_zhd(message: Message, state: FSMContext):
    try:
        volume = float(message.text)
        await state.update_data(volume=volume)
        await state.set_state(FreightCalculationState.confirming_data_zhd)

        data = await state.get_data()
        response = (
            f"<b>–í—ã –≤–≤–µ–ª–∏ (–ñ–î):</b>\n\n"
            f"üöÇ <b>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <code>{data['origin_city']}</code></b>\n"
            f"üèô <b>–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{data['destination_city']}</code></b>\n"
            f"‚öñ <b>–í–µ—Å: <code>{data['weight']} –∫–≥</code></b>\n"
            f"üì¶ <b>–û–±—ä–µ–º: <code>{data['volume']} –º¬≥</code></b>\n"
        )

        keyboard = get_confirm_keyboard_for_zhd()
        await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

    except ValueError:
        error_message = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        await asyncio.sleep(3)
        await error_message.delete()
        
        
# ^ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ñ–î
@router.callback_query(CalcConfirmZhdCallback.filter())
async def confirm_calculation_zhd(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    required_keys = ["origin_city", "destination_city", "weight", "volume"]
    missing_keys = [key for key in required_keys if key not in data]

    if missing_keys:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ {', '.join(missing_keys)}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."
        )
        await state.clear()
        return

    try:
        result = get_tariff_zhd(
            origin_city=data["origin_city"],
            destination_city=data["destination_city"],
            weight=data["weight"],
            volume=data["volume"]
        )

        response = (
            f"‚úÖ <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ñ–î-–¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
            f"üöÇ <b>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> <code>{result['origin_city']}</code>\n"
            f"üèô <b>–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <code>{result['destination_city']}</code>\n"
            f"‚öñ <b>–í–µ—Å –≥—Ä—É–∑–∞:</b> <code>{result['weight']} –∫–≥</code>\n"
            f"üì¶ <b>–û–±—ä–µ–º –≥—Ä—É–∑–∞:</b> <code>{result['volume']} –º¬≥</code>\n\n"
            f"üí∞ <b>–¢–∞—Ä–∏—Ñ –ø–æ –æ–±—ä—ë–º—É:</b> <code>{result['tariff']} USD</code>\n"
            f"üìú <b>–≠–∫—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è:</b> <code>{result['export_declaration']} USD</code>\n"
            f"üïí <b>–¢—Ä–∞–Ω–∑–∏—Ç–Ω–æ–µ –≤—Ä–µ–º—è:</b> <code>{result['transit_time']}</code>\n"
            f"‚ÑπÔ∏è <b>–î–æ–ø. —É—Å–ª–æ–≤–∏—è:</b> <code>{result['additional_conditions']}</code>\n"
            f"üì¶ <b>–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –°–í–•:</b> <code>{result['warehouse_costs']}</code>\n\n"
            f"üí∞ <u><b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <code>{result['total_cost']:.2f} USD</code></u>\n"
        )

        await callback.message.edit_text(response, parse_mode="HTML")
        await state.clear()

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
        await state.clear()
    
    
# endregion