import asyncio
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from app.utils.states import FreightCalculationState
from app.UI.inline import(
  get_calculator_keyboard,
  get_build_keyboard,
  get_confirm_keyboard,
) 
from app.handlers.callbacks.callback_data import(
  ContinueStartCallback,
  CalcBuildCallback,
  CalcBackToMenu,
  CalcAutoCallback,
  CalcAviaCallback,
  CalcZdCallback,
  CalcConteinersCallback,
)

router = Router()

#region #&–í—ã–∑–æ–≤ –∫–ª–∞–≤
#^ –í—ã–∑–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª—å–∫—É–ª–µ–π
@router.callback_query(ContinueStartCallback.filter())
async def Continue_handler(callback: CallbackQuery):
  text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:\n<code>–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏</code> üëá"
  keyboard = get_calculator_keyboard()
  
  await callback.message.edit_text(
    text=text,
    reply_markup=keyboard,
    parse_mode="HTML"
  )
  
  await callback.answer()
  

#^ –í—ã–∑–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–±–æ—Ä–∫–∏
@router.callback_query(CalcBuildCallback.filter())
async def Build_handler(callback: CallbackQuery):
  text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ üëáüèª</b>"
  keyboard = get_build_keyboard()
  
  await callback.message.edit_text(
    text=text,
    reply_markup=keyboard,
    parse_mode="HTML"
  )
  
  await callback.answer()


#^ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª—å–∫—É–ª–µ–π
@router.callback_query(CalcBackToMenu.filter())
async def Back_to_calc_menu_handler(callback: CallbackQuery):
  text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:\n<code>–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏</code> üëáüèª"
  keyboard = get_calculator_keyboard()
  
  await callback.message.edit_text(
    text=text,
    reply_markup=keyboard,
    parse_mode="HTML"
  )
  
  await callback.answer()
#endregion




#region #&auto
#^ –°—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(CalcAutoCallback.filter())
async def start_calculation(callback: CallbackQuery, state: FSMContext):
  await state.set_state(FreightCalculationState.entering_origin_city)
  await callback.message.answer(
    text="<b>üöö –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>",
    parse_mode="HTML"
  )
  await callback.answer()


#^ –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.message(FreightCalculationState.entering_origin_city)
async def enter_origin_city(message: Message, state: FSMContext):
  await state.update_data(origin_city=message.text)
  await state.set_state(FreightCalculationState.entering_destination_city)
  await message.answer(
    text="<b>üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>",
    parse_mode="HTML"
  )


#^ –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(FreightCalculationState.entering_destination_city)
async def enter_destination_sity(message: Message, state: FSMContext):
  await state.update_data(destination_city=message.text)
  await state.set_state(FreightCalculationState.entering_weight)
  await message.answer(
    text="<b>‚öñ –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (–∫–≥):</b>",
    parse_mode="HTML"
  )


#^ –í–≤–æ–¥ –≤–µ—Å–∞ –≥—Ä—É–∑–∞
@router.message(FreightCalculationState.entering_weight)
async def enter_veigth(message: Message, state: FSMContext):
  try:
    weight = float(message.text)
    await state.update_data(weight=weight)
    await state.set_state(FreightCalculationState.entering_volume)
    await message.answer(
      text="<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞ (–º¬≥):</b>",
      parse_mode="HTML"
    )
  except ValueError:
    error_message = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await asyncio.sleep(3)
    await error_message.delete()
    

#^ –í–≤–æ–¥ –æ–±—ä–µ–º–∞ –≥—É—Ä–∑–∞
@router.message(FreightCalculationState.entering_volume)
async def enter_volume(message: Message, state: FSMContext):
  try:
    volume = float(message.text)
    await state.update_data(volume=volume)
    await state.set_state(FreightCalculationState.confirming_data)
    
    data = await state.get_data()
    response = (
      f"<b>–í—ã –≤–≤–µ–ª–∏:</b>\n\n"
      f"üöö <b>–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <code>{data['origin_city']}</code></b>\n"
      f"üèô <b>–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{data['destination_city']}</code></b>\n"
      f"‚öñ <b>–í–µ—Å: <code>{data['weight']} –∫–≥</code></b>\n"
      f"üì¶ <b>–û–±—ä–µ–º: <code>{data['volume']} –º¬≥</code></b>\n" 
    )
    
    keyboard = get_confirm_keyboard()
    
    await message.answer(
      response,
      reply_markup=keyboard,
      parse_mode="HTML"
    )
    
  except ValueError:
    error_message = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await asyncio.sleep(3)
    await error_message.delete()