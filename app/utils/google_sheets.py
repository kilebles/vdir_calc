from thefuzz import process
import gspread
import logging

from oauth2client.service_account import ServiceAccountCredentials
from app.core.config import CONFIG

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

SPREADSHEET_NAME = "–°—Ç–∞–≤–∫–∏ –§–û–ë 28 12 2024"

# region #&–†–∞—Å—Å—á–µ—Ç Auto


def get_google_sheet(sheet_name):
    logging.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets: {sheet_name}")

    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        CONFIG.GOOGLE_CREDENTIALS, scope
    )
    client = gspread.authorize(creds)

    try:
        spreadsheet = client.open(SPREADSHEET_NAME)
        logging.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: {SPREADSHEET_NAME}")
    except gspread.exceptions.SpreadsheetNotFound:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ '{SPREADSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø—ã.")
        raise

    sheet = spreadsheet.worksheet(sheet_name)
    return sheet


def get_tariff_before_border(weight, volume):
    logging.info(f"üìä –ó–∞–ø—Ä–æ—Å —Ç–∞—Ä–∏—Ñ–∞ –î–û –ì–†–ê–ù–ò–¶–´ –¥–ª—è –≤–µ—Å–∞ {weight} –∫–≥ –∏ –æ–±—ä–µ–º–∞ {volume} –º¬≥")

    sheet = get_google_sheet("RAW –°–±–æ—Ä–∫–∞ –ê–≤—Ç–æ")
    headers = sheet.row_values(1)
    logging.info(f"üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}")

    volumetric_weight = volume * 170
    calc_weight = max(weight, volumetric_weight)
    logging.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {weight} –∫–≥, –û–±—ä–µ–º–Ω—ã–π: {volumetric_weight} –∫–≥ ‚Üí –†–∞—Å—á–µ—Ç–Ω—ã–π: {calc_weight} –∫–≥")

    weight_column = None
    volume_column = None

    if calc_weight == weight:
        for i, header in enumerate(headers):
            if "–∫–≥" in header:
                clean_header = header.replace(" –∫–≥", "").replace(",", ".").strip()
                parts = clean_header.split("-")
                if len(parts) == 2:
                    low, high = map(float, parts)
                    if low <= calc_weight <= high:
                        weight_column = i + 1
                        break
                elif "–∏ –±–æ–ª–µ–µ" in header:
                    if float(parts[0]) <= calc_weight:
                        weight_column = i + 1
                        break

    if calc_weight == volumetric_weight and weight_column is None:
        for i, header in enumerate(headers):
            if "–º¬≥" in header:
                clean_header = header.replace(" –º¬≥", "").replace(",", ".").strip()
                if "–¥–æ" in header:
                    max_volume = float(clean_header.split(" ")[1])
                    if volume <= max_volume:
                        volume_column = i + 1
                        break
                elif "—Å–≤—ã—à–µ" in header:
                    volume_column = i + 1
                    break

    if weight_column:
        value = sheet.cell(2, weight_column).value
        logging.info(f"üí∞ –ù–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ –ø–æ –≤–µ—Å—É: {value}")
        if value:
            return float(value.replace(",", ".")) * calc_weight

    if volume_column:
        value = sheet.cell(2, volume_column).value
        logging.info(f"üí∞ –ù–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ –ø–æ –æ–±—ä–µ–º—É: {value}")
        if value:
            return float(value.replace(",", "."))

    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –≤ —Ç–∞–±–ª–∏—Ü–µ!")


def get_tariff_after_border(destination_city, weight, volume):
    logging.info(f"üìä –ó–∞–ø—Ä–æ—Å —Ç–∞—Ä–∏—Ñ–∞ –ü–û–°–õ–ï –ì–†–ê–ù–ò–¶–´ –¥–ª—è {destination_city}, –≤–µ—Å {weight} –∫–≥, –æ–±—ä–µ–º {volume} –º¬≥")

    sheet = get_google_sheet("RAW –°–±–æ—Ä–∫–∞ –ø–æ –†–§")
    cities = sheet.col_values(2)

    if destination_city not in cities:
        raise ValueError(f"‚ùå –ì–æ—Ä–æ–¥ {destination_city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö!")

    row_index = cities.index(destination_city) + 1
    headers = sheet.row_values(1)
    weight_column = None
    volume_column = None

    volumetric_weight = volume * 170
    calc_weight = max(weight, volumetric_weight)
    logging.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤ (–ü–û–°–õ–ï –ì–†–ê–ù–ò–¶–´): –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {weight} –∫–≥, –û–±—ä–µ–º–Ω—ã–π: {volumetric_weight} –∫–≥ ‚Üí –†–∞—Å—á–µ—Ç–Ω—ã–π: {calc_weight} –∫–≥")

    for i, header in enumerate(headers):
        if "–∫–≥" in header:
            parts = header.replace(" –∫–≥", "").replace(",", ".").split()
            if len(parts) == 2 and "–¥–æ" in parts:
                if calc_weight <= float(parts[1]):
                    weight_column = i + 1
                    break
            elif "–æ—Ç" in header:
                weight_column = i + 1
                break

    for i, header in enumerate(headers):
        if "–º¬≥" in header:
            parts = header.replace(" –º¬≥", "").replace(",", ".").split()
            if len(parts) == 2 and "–¥–æ" in parts:
                if volume <= float(parts[1]):
                    volume_column = i + 1
                    break
            elif "–æ—Ç" in header:
                volume_column = i + 1
                break

    if weight_column:
        value = sheet.cell(row_index, weight_column).value
        logging.info(f"üí∞ –ù–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ –ø–æ –≤–µ—Å—É: {value}")
        if value:
            return float(value.replace(",", ".")) * calc_weight
    
    if volume_column:
        value = sheet.cell(row_index, volume_column).value
        logging.info(f"üí∞ –ù–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ –ø–æ –æ–±—ä–µ–º—É: {value}")
        if value:
            return float(value.replace(",", "."))

    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ –†–§!")


def calculate_delivery_cost(origin_city, destination_city, weight, volume):
    logging.info(f"üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è {origin_city} -> {destination_city}, {weight} –∫–≥, {volume} –º¬≥")

    try:
        cost_before_border = get_tariff_before_border(weight, volume)
        logging.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã: {cost_before_border} —Ä—É–±.")

        cost_after_border = get_tariff_after_border(destination_city, weight, volume)
        logging.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –≥—Ä–∞–Ω–∏—Ü—ã: {cost_after_border} —Ä—É–±.")

        total_cost = cost_before_border + cost_after_border

        result = {
            "origin_city": origin_city,
            "destination_city": destination_city,
            "weight": weight,
            "volume": volume,
            "cost_before_border": cost_before_border,
            "cost_after_border": cost_after_border,
            "total_cost": total_cost,
        }

        logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç: {result}")
        return result

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ calculate_delivery_cost: {e}")
        raise e


# endregion


# region #&–†–∞—Å—á–µ—Ç –ñ–î


def get_tariff_zhd(origin_city, destination_city, weight, volume):
    logging.info(f"üìä –ó–∞–ø—Ä–æ—Å —Ç–∞—Ä–∏—Ñ–∞ –ñ–î –¥–ª—è {origin_city} -> {destination_city}, –≤–µ—Å {weight} –∫–≥, –æ–±—ä–µ–º {volume} –º¬≥")

    sheet = get_google_sheet("RAW –°–±–æ—Ä–∫–∞ –ñ–î")
    headers = sheet.row_values(1)
    cities = sheet.col_values(2)

    if destination_city not in cities:
        raise ValueError(f"‚ùå –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {destination_city} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º –≤ —Ç–∞–±–ª–∏—Ü–µ!")

    row_index = cities.index(destination_city) + 1

    volume_brackets = ["0 - 3", "3.1 - 5", "5.1 - 10"]
    volume_column = None

    for i, header in enumerate(headers):
        header_clean = header.replace(",", ".").replace("–º3", "").strip()
        for bracket in volume_brackets:
            if bracket in header_clean:
                low, high = map(float, bracket.split(" - "))
                if low <= volume <= high:
                    volume_column = i + 1
                    break
        if volume_column:
            break

    if volume_column is None:
        raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ –æ–±—ä–µ–º—É!")

    def clean_numeric(value):
        return float(value.replace("$", "").strip().replace(",", "."))

    try:
        tariff = clean_numeric(sheet.cell(row_index, volume_column).value)  # üõ† –ß–∏—Å—Ç–∏–º `$`
        export_declaration = clean_numeric(sheet.cell(row_index, headers.index("–≠–∫—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è") + 1).value)
        transit_time = sheet.cell(row_index, headers.index("–¢—Ä–∞–Ω–∑–∏—Ç–Ω–æ–µ –≤—Ä–µ–º—è") + 1).value.strip()
        additional_conditions = sheet.cell(row_index, headers.index("–î–æ–ø.–£—Å–ª–æ–≤–∏—è") + 1).value.strip()
        warehouse_costs = sheet.cell(row_index, headers.index("–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –°–í–•") + 1).value.strip()
    except Exception as e:
        raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    total_cost = tariff * volume + export_declaration

    result = {
        "origin_city": origin_city,
        "destination_city": destination_city,
        "weight": weight,
        "volume": volume,
        "tariff": tariff,
        "export_declaration": export_declaration,
        "transit_time": transit_time,
        "additional_conditions": additional_conditions,
        "warehouse_costs": warehouse_costs,
        "total_cost": total_cost,
    }

    logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ñ–î: {result}")
    return result


# endregion

